branches: [main]
plugins:
  - - '@semantic-release/commit-analyzer'
    - preset: conventionalcommits
      presetConfig:
#        types:
#          - {type: patch, section: '🔧 Patches', hidden: false}
#          - {type: minor, section: '🔖 Minor Changes', hidden: false}
#          - {type: major, section: '🚨 Major Changes', hidden: false}
#          - {type: feat, section: '🚀 Features', hidden: false}
#          - {type: fix, section: '🐛 Bug Fixes', hidden: false}
#          - {type: perf, section: '⚡ Performance', hidden: false}
#          - {type: refactor, section: '🚜 Refactor', hidden: false}
#          - {type: docs, section: '📚 Documentation', hidden: false}
#          - {type: test, section: '🧪 Testing', hidden: false}
#          - {type: style, section: '🎨 Styling', hidden: false}
#          - {type: revert, section: '◀️ Revert', hidden: false}
#          - {type: build, section: '🏗️ Build', hidden: false}
#          - {type: ci, section: '🔄 CI', hidden: false}
#          - {type: chore, section: '🧹 Chore', hidden: false}
#        bumpStrict: true
      parserOpts: {
#        headerPattern: '/^(\w*)(?:\((.*)\))?!?: (.*)$/',
#        breakingHeaderPattern: '/^(\w*)(?:\((.*)\))?!: (.*)$/',
#        headerCorrespondence: [ "type", "scope", "subject" ],
        noteKeywords: [ "BREAKING CHANGE", "BREAKING CHANGES", "BREAKING-CHANGE", "BREAKING-CHANGES", "BREAKING" ],
#        revertPattern: '/^(?:Revert|revert:)\s"?([\s\S]+?)"?\s*This reverts commit (\w*)\./i',
      }
#      releaseRules:
#        - {type: patch, release: patch}
#        - {type: minor, release: minor}
#        - {type: major, release: major}
#        - {type: perf, release: patch}
#        - {type: refactor, release: patch}
#        - {type: docs, release: false}
#        - {type: test, release: patch}
#        - {type: style, release: patch}
#        - {type: revert, release: patch}
#        - {type: build, release: false}
#        - {type: ci, release: false}
#        - {type: chore, release: patch}

  - - '@semantic-release/release-notes-generator'
    - preset: conventionalcommits
      presetConfig:
        types:
          - { type: patch, section: '🔧 Patches', hidden: false }
          - { type: minor, section: '🔖 Minor Changes', hidden: false }
          - { type: major, section: '🚨 Major Changes', hidden: false }
          - {type: feat, section: '🚀 Features', hidden: false}
          - {type: fix, section: '🐛 Bug Fixes', hidden: false}
          - {type: perf, section: '⚡ Performance', hidden: false}
          - {type: refactor, section: '🚜 Refactor', hidden: false}
          - {type: docs, section: '📚 Documentation', hidden: false}
          - {type: test, section: '🧪 Testing', hidden: false}
          - {type: style, section: '🎨 Styling', hidden: false}
          - {type: revert, section: '◀️ Revert', hidden: false}
          - {type: build, section: '🏗️ Build', hidden: false}
          - {type: ci, section: '🔄 CI', hidden: false}
          - {type: chore, section: '🧹 Chore', hidden: false}
        commitGroupsSort: ['feat', 'fix', 'perf', 'refactor', 'docs', 'test', 'style', 'revert', 'build', 'ci', 'chore']

  - - '@semantic-release/changelog'
    - changelogFile: '../docs/CHANGELOG.md'
      changelogTitle: "# Changelog\n\nAll notable changes to this project will be documented in this file."

  - - '@semantic-release/exec'
    - prepareCmd: |
        # The git plugin does not commit the changelog as it is not in a subdirectory of the working directory.
        # So we need to do it manually.
        git config user.name "semantic-release-bot"
        git config user.email "semantic-release-bot@martynus.net"
        git add ../docs/CHANGELOG.md
        git commit -m "chore(release): update changelog for ${nextRelease.version} [skip ci]"
        git push origin main

  - '@semantic-release/github'
