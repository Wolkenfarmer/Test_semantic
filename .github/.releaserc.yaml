branches: [ main ]

preset: conventionalcommits
presetConfig:
  types:
    - { type: major, section: '🚨 Major Changes', hidden: false }
    - { type: minor, section: '🔖 Minor Changes', hidden: false }
    - { type: patch, section: '🔧 Patches', hidden: false }
    - { type: feat, section: '🚀 Features', hidden: false }
    - { type: feature, section: '🚀 Features', hidden: false }
    - { type: fix, section: '🐛 Bug Fixes', hidden: false }
    - { type: perf, section: '⚡ Performance', hidden: false }
    - { type: performance, section: '⚡ Performance', hidden: false }
    - { type: refactor, section: '🚜 Refactor', hidden: false }
    - { type: docs, section: '📚 Documentation', hidden: false }
    - { type: test, section: '🧪 Testing', hidden: false }
    - { type: style, section: '🎨 Styling', hidden: false }
    - { type: revert, section: '◀️ Revert', hidden: false }
    - { type: build, section: '🏗️ Build', hidden: false }
    - { type: ci, section: '🔄 CI', hidden: false }
    - { type: chore, section: '🧹 Chore', hidden: false }
    # also indirectly defines the order of the sections in the changelog
    # same section names are automatically grouped together in the changelog

plugins:
  - - '@semantic-release/commit-analyzer'
    - parserOpts: {
      noteKeywords: [ "BREAKING CHANGE", "BREAKING CHANGES", "BREAKING-CHANGE", "BREAKING-CHANGES", "BREAKING" ],
    }
      releaseRules:
        - { breaking: true, release: major }
        - { type: major, release: major }
        - { type: minor, release: minor }
        - { type: patch, release: patch }
        - { type: feat, release: minor }
        - { type: feature, release: minor }
        - { type: fix, release: patch }
        - { type: perf, release: patch }
        - { type: performance, release: patch }
        - { type: refactor, release: patch }
        - { type: docs, release: false }
        - { type: test, release: patch }
        - { type: style, release: patch }
        - { type: revert, release: patch }
        - { type: build, release: false }
        - { type: ci, release: false }
        - { type: chore, release: patch }

        - - '@semantic-release/release-notes-generator'

        - - '@semantic-release/changelog'
          - changelogFile: '../docs/CHANGELOG.md'
            changelogTitle: "# Changelog\n\nAll notable changes to this project will be documented in this file."

        - - '@semantic-release/git'
          - assets: [ "../docs/CHANGELOG.md" ]
            message: "chore(docs): update changelog [skip ci]"

        - - '@semantic-release/exec'
          - prepareCmd: |
              # The git plugin does not commit the changelog as it is not in a subdirectory of the working directory.
              # So we need to do it manually.
              git config user.name "semantic-release-bot"
              git config user.email "semantic-release-bot@martynus.net"
              git add ../docs/CHANGELOG.md
              git commit -m "chore(release): update changelog for ${nextRelease.version} [skip ci]"
              git push origin main
            publishCmd: |
              echo "## Release Notes for v${nextRelease.version}" > release-notes.md
              echo "" >> release-notes.md
              echo "${nextRelease.notes}" | grep -v "## " >> release-notes.md
              # goreleaser release --release-notes release-notes.md --clean

        - '@semantic-release/github'
